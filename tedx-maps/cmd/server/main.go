package main

import (
	"log"
	"os"

	"tedx-maps/config"
	"tedx-maps/internal/server"

	"github.com/joho/godotenv"
)

func main() {
	// 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  Warning: .env file not found or couldn't be loaded ‚Äî continuing with system env")
	}

	// 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º YAML-–∫–æ–Ω—Ñ–∏–≥
	cfg, err := config.LoadConfig("config/config.yaml")
	if err != nil {
		log.Fatalf("‚ùå Failed to load config: %v", err)
	}

	// 3Ô∏è‚É£ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if port := os.Getenv("APP_PORT"); port != "" {
		cfg.Server.Port = port
	}
	if dbURL := os.Getenv("DATABASE_URL"); dbURL != "" {
		cfg.Database.URL = dbURL
	}

	// 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä
	srv := server.NewServer(cfg)

	// 5Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	if err := srv.Run(); err != nil {
		log.Fatalf("‚ùå Server stopped: %v", err)
	}

	log.Println("üöÄ TEDx Maps server is running on port:", cfg.Server.Port)
}
